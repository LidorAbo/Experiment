def Commit_Id
def Build_version
def NextVersion
def Current_version
docker_slave_node = 'docker-host'
script_name = "Experiment.py"
test_script_name = "ExperimentTests.py"
folder_scripts= "scripts"
pipeline_failure_indicator_string = 'FAILURE'
module="python3"
docker_file_name = 'Dockerfile'
string_to_check = "Hello world!"
git_cred_id = 'git-cred'
release_dir = 'Release'
expiremnt_dir = 'Expirmet'
dev_branch =  '*/Dev'
regex_version = '1.*'
initial_version = '1.0.0'
underscore = '_'
pipeline {
    options {
        timeout(8)
    }
    agent {
        label 'master'
    }
    stages {
        stage('checkout') {

            steps {
                script {
                    dir(release_dir){
                        checkout([$class: 'GitSCM', branches: [[name: dev_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: git_cred_id, url: 'https://github.com/LidorAbo/Release.git']]])
                    }
                    dir(expiremnt_dir){
                            checkout([$class: 'GitSCM', branches: [[name: dev_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: git_cred_id, url: 'https://github.com/LidorAbo/Experiment.git']]])
                            result = sh(script: 'git branch -r | grep -q 1.*', returnStatus: true)
                            if (!result)
                                Current_version = sh(script: "git branch -r | sed 's/[^0-9\\.]*//g' | sort -r | head -n 1")
                            else
                                Current_version = initial_version
                            Commit_Id = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                            Build_version = Current_version + underscore + Commit_Id
                            println("Checking the build version: $Build_version")
                    }

                }
            }
        }
        stage('UT'){
            steps{
                script{
                    sh "echo Checking the build version: $Build_version"
                    dir("./$folder_scripts"){
                        try {
                            sh "$module $test_script_name"
                        }
                        catch (exception){
                            println "The test is failed"
                            currentBuild.result =  pipeline_failure_indicator_string
                            throw exception
                        }
                    }

                }
            }
        }
//        stage('Build docker image'){
//
//            when{
//                expression { dockerize_string in list_of_choices }
//            }
//            steps{
//                script{
//                    archive_name = 'archive'
//                        sh "echo $workspace"
//                        dir(workspace){
//                            stash includes: "$docker_file_name,**/$folder_scripts/*", name: archive_name
//                        }
//                    node(docker_slave_node){
//                        try{
//                             unstash archive_name
//                             sh "sudo docker build --build-arg script_name=$script_name --build-arg test_script_name=$test_script_name --build-arg folder_scripts=$folder_scripts --build-arg module=$module --build-arg image_name=$base_image_name . -t $image_name:$Build_version"
//                        }
//                        catch (exception){
//                            println "The image build is failed"
//                            currentBuild.result = pipeline_failure_indicator_string
//                            throw exception
//                        }
//
//                    }
//                }
//            }
//        }
//        stage('Testing running image in container'){
//            when{
//                expression { dockerize_string in list_of_choices }
//            }
//            steps{
//                script{
//                    remove_image_command = 'sudo docker rmi -f $(sudo docker images | grep python | awk \'{print $3}\')'
//                    error_message_running_container = "The result of running container is incorrect"
//                    node(docker_slave_node){
//                        try{
//                            result = sh(script: "sudo docker run --rm --name $image_name $image_name:$Build_version", returnStdout: true).trim()
//                            if (result != string_to_check){
//                                sh label: '', script: remove_image_command
//                                currentBuild.result = pipeline_failure_indicator_string
//                                throw new Exception(error_message_running_container)
//                            }
//                        }
//                        catch (exception){
//                            sh label: '', script: remove_image_command
//                            currentBuild.result = pipeline_failure_indicator_string
//                            throw new Exception(error_message_running_container)
//                        }
//                    }
//                }
//            }
//        }
//        stage('Push image to the Dockerhub'){
//            when{
//                expression { dockerize_string in list_of_choices }
//            }
//            steps{
//                script{
//                    node(docker_slave_node) {
//                        try {
//                            withCredentials([usernamePassword(credentialsId: docker_hub_jenkins_cred_id, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
//                                sh "sudo docker login -u=${DOCKER_USERNAME} -p=${DOCKER_PASSWORD}"
//                                sh "sudo docker tag $image_name:$Build_version $docker_hub_repo:${image_name + underscore +Build_version}"
//                                sh "sudo docker push $docker_hub_repo:${image_name + underscore + Build_version}"
//                                sh(script: "$remove_image_command")
//
//                            }
//                        }
//                        catch (exception){
//                            println "The image upload is failed"
//                            sh(script: "$remove_image_command")
//                            currentBuild.result = pipeline_failure_indicator_string
//                            throw exception
//                        }
//
//                    }
//                }
//            }
//        }
//        stage('Push tag to the repository'){
//            when{
//                expression { dockerize_string in list_of_choices }
//            }
//            steps{
//                script{
//                    withCredentials([usernamePassword(credentialsId: git_cred_id , passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
//                        try{
//                            sh """
//                         git config --global user.name "LidorAbo"
//                         git config --global user.email "Lidorabo2@gmail.com"
//                         git tag -a $NextVersion -m "Tag for release version of python module"
//                         git push  https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/DevOpsINT/Course.git $NextVersion
//                            """
//                        }
//                        catch (exception){
//                            println "Pushing tag to git is failed"
//                            currentBuild.result = pipeline_failure_indicator_string
//                            throw exception
//                        }
//
//                    }
//                }
//            }
//
        stage('Cleanup') {
            steps {
                deleteDir()
            }

        }
    }
}